#include <iostream>
using namespace std;

#define MAX 5  // Maximum stack size

struct Student {
    int rollNo;
    int marks;
};

class StudentStack {
    Student stack[MAX];  
    int top;

public:
    StudentStack() {
        top = -1;
    }

    // Push student record onto the stack
    void push(int rollNo, int marks) {
        if (top >= MAX - 1) {
            cout << "Stack Overflow! Cannot add more students.\n";
            return;
        }
        top++;
        stack[top].rollNo = rollNo;
        stack[top].marks = marks;
        cout << "Student added successfully!\n";
    }

    // Pop the most recent student record
    void pop() {
        if (top < 0) {
            cout << "Stack Underflow! No students to remove.\n";
            return;
        }
        cout << "Removing student: Roll No " << stack[top].rollNo << ", Marks: " << stack[top].marks << "\n";
        top--;
    }

    // View all students from top to bottom
    void display() {
        if (top < 0) {
            cout << "No students in the stack!\n";
            return;
        }
        cout << "\nStudent Records (Top to Bottom):\n";
        for (int i = top; i >= 0; i--) {
            cout << "Roll No: " << stack[i].rollNo << ", Marks: " << stack[i].marks << "\n";
        }
    }

    // Check if stack is empty
    bool isEmpty() {
        return (top < 0);
    }
};

int main() {
    StudentStack studentStack;
    int choice, rollNo, marks;

    do {
        cout << "\nStudent Record Management (Stack)\n";
        cout << "1. Add Student\n2. View Students\n3. Remove Most Recent Student\n4. Check if Stack is Empty\n5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter Roll No: ";
                cin >> rollNo;
                cout << "Enter Marks: ";
                cin >> marks;
                studentStack.push(rollNo, marks);
                break;
            case 2:
                studentStack.display();
                break;
            case 3:
                studentStack.pop();
                break;
            case 4:
                if (studentStack.isEmpty()) {
                    cout << "The stack is empty.\n";
                } else {
                    cout << "The stack is not empty.\n";
                }
                break;
            case 5:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice! Try again.\n";
        }
    } while (choice != 5);

    return 0;
}
